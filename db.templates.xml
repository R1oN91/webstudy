<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="_delete">	public int delete(int idx) {&#13;
&#13;
        int res = 0;&#13;
&#13;
		Connection conn = null;&#13;
		PreparedStatement pstmt = null;&#13;
&#13;
		String sql = "delete from 테이블명  where idx=?";&#13;
&#13;
		try {&#13;
			//1.Connection 얻어오기&#13;
			conn = DBService.getInstance().getConnection();&#13;
&#13;
			//2.PreparedStatement얻기&#13;
			pstmt = conn.prepareStatement(sql);&#13;
&#13;
            //3.PrepareStatement Parameter설정&#13;
            pstmt.setInt(1,idx);&#13;
 			&#13;
			//4.DB delete&#13;
            res = pstmt.executeUpdate();&#13;
			&#13;
&#13;
		} catch (Exception e) {&#13;
			// TODO: handle exception&#13;
			e.printStackTrace();&#13;
		} finally {&#13;
&#13;
			try {&#13;
				if (pstmt != null)&#13;
					pstmt.close();&#13;
				if (conn != null)&#13;
					conn.close();&#13;
			} catch (SQLException e) {&#13;
				// TODO Auto-generated catch block&#13;
				e.printStackTrace();&#13;
			}&#13;
		}&#13;
&#13;
		return res;&#13;
	}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="_forward_servlet">import jakarta.servlet.RequestDispatcher;&#13;
import jakarta.servlet.ServletException;&#13;
import jakarta.servlet.annotation.WebServlet;&#13;
import jakarta.servlet.http.HttpServlet;&#13;
import jakarta.servlet.http.HttpServletRequest;&#13;
import jakarta.servlet.http.HttpServletResponse;&#13;
import java.io.IOException;&#13;
&#13;
/**&#13;
 * Servlet implementation class ${primary_type_name}&#13;
 */&#13;
@WebServlet("/${cursor}")&#13;
public class ${primary_type_name} extends HttpServlet {&#13;
	private static final long serialVersionUID = 1L;&#13;
&#13;
	/**&#13;
	 * @see HttpServlet#service(HttpServletRequest request, HttpServletResponse response)&#13;
	 */&#13;
	protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {&#13;
		// TODO Auto-generated method stub&#13;
		&#13;
		&#13;
		&#13;
		//dispatcher(forward)&#13;
		String forward_page = "";&#13;
		RequestDispatcher disp = request.getRequestDispatcher(forward_page);&#13;
		disp.forward(request, response);&#13;
		&#13;
	}&#13;
&#13;
}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="_insert">	public int insert(${argType} vo) {&#13;
&#13;
        int res = 0;&#13;
&#13;
		Connection conn = null;&#13;
		PreparedStatement pstmt = null;&#13;
&#13;
		String sql = "insert into 테이블명 values()";&#13;
&#13;
		try {&#13;
			//1.Connection 얻어오기&#13;
			conn = DBService.getInstance().getConnection();&#13;
&#13;
			//2.PreparedStatement얻기&#13;
			pstmt = conn.prepareStatement(sql);&#13;
&#13;
            //3.PrepareStatement Parameter설정&#13;
            			&#13;
			//4.DB Insert&#13;
            res = pstmt.executeUpdate();&#13;
			&#13;
&#13;
		} catch (Exception e) {&#13;
			// TODO: handle exception&#13;
			e.printStackTrace();&#13;
		} finally {&#13;
&#13;
			try {&#13;
				if (pstmt != null)&#13;
					pstmt.close();&#13;
				if (conn != null)&#13;
					conn.close();&#13;
			} catch (SQLException e) {&#13;
				// TODO Auto-generated catch block&#13;
				e.printStackTrace();&#13;
			}&#13;
		}&#13;
&#13;
		return res;&#13;
	}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="_selectList">	public List&lt;${argType}&gt; selectList(){&#13;
		&#13;
		List&lt;${argType}&gt; list = new ArrayList&lt;${argType}&gt;();&#13;
		&#13;
		Connection	      conn  = null;&#13;
		PreparedStatement pstmt = null;&#13;
		ResultSet         rs    = null;&#13;
		&#13;
		String            sql   = "select * from [테이블명]";&#13;
		&#13;
		try {&#13;
			//1.Connection 얻어오기&#13;
			conn = DBService.getInstance().getConnection();&#13;
			&#13;
			//2.PreparedStatement얻기&#13;
			pstmt = conn.prepareStatement(sql);&#13;
			&#13;
			//3.ResultSet 얻어오기&#13;
			rs = pstmt.executeQuery();&#13;
			&#13;
			//레코드값을 VO포장후 list넣는다&#13;
			while(rs.next()) {&#13;
				&#13;
				${argType} vo = new ${argType}();&#13;
				//rs가 가리키는 레코드값을 vo에 넣는다&#13;
				&#13;
								&#13;
				list.add(vo);&#13;
			}&#13;
			&#13;
		} catch (Exception e) {&#13;
			// TODO: handle exception&#13;
			e.printStackTrace();&#13;
		} finally {&#13;
			&#13;
			try {&#13;
				if(rs!=null) rs.close();&#13;
				if(pstmt!=null)pstmt.close();&#13;
				if(conn!=null)conn.close();&#13;
			} catch (SQLException e) {&#13;
				// TODO Auto-generated catch block&#13;
				e.printStackTrace();&#13;
			}&#13;
		}&#13;
		&#13;
		return list;&#13;
	}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="_selectOne">	public ${argType} selectOne(int idx) {&#13;
&#13;
        ${argType} vo = null;&#13;
&#13;
		Connection conn = null;&#13;
		PreparedStatement pstmt = null;&#13;
		ResultSet rs = null;&#13;
&#13;
		String sql = "select * from 테이블명 where idx=?";&#13;
&#13;
		try {&#13;
			//1.Connection 얻어오기&#13;
			conn = DBService.getInstance().getConnection();&#13;
&#13;
			//2.PreparedStatement얻기&#13;
			pstmt = conn.prepareStatement(sql);&#13;
&#13;
            //3.PrepareStatement Parameter설정&#13;
            pstmt.setInt(1,idx);&#13;
&#13;
			//3.ResultSet 얻어오기&#13;
			rs = pstmt.executeQuery();&#13;
&#13;
			&#13;
			if (rs.next()) {&#13;
&#13;
				vo = new ${argType}();&#13;
				//rs가 가리키는 레코드값을 vo에 넣는다&#13;
&#13;
			}&#13;
&#13;
		} catch (Exception e) {&#13;
			// TODO: handle exception&#13;
			e.printStackTrace();&#13;
		} finally {&#13;
&#13;
			try {&#13;
				if (rs != null)&#13;
					rs.close();&#13;
				if (pstmt != null)&#13;
					pstmt.close();&#13;
				if (conn != null)&#13;
					conn.close();&#13;
			} catch (SQLException e) {&#13;
				// TODO Auto-generated catch block&#13;
				e.printStackTrace();&#13;
			}&#13;
		}&#13;
&#13;
		return vo;&#13;
	}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="_singleton">	//single-ton&#13;
	static ${primary_type_name} single = null;&#13;
	&#13;
	public static ${primary_type_name} getInstance() {&#13;
		&#13;
	    if(single==null) &#13;
	    	 single = new ${primary_type_name}();&#13;
		&#13;
		return single;&#13;
	}&#13;
	&#13;
	private ${primary_type_name}() {&#13;
&#13;
    }</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="_update">	public int update(${argType} vo) {&#13;
&#13;
        int res = 0;&#13;
&#13;
		Connection conn = null;&#13;
		PreparedStatement pstmt = null;&#13;
&#13;
		String sql = "update 테이블명 set 필드명=값  where idx=?";&#13;
&#13;
		try {&#13;
			//1.Connection 얻어오기&#13;
			conn = DBService.getInstance().getConnection();&#13;
&#13;
			//2.PreparedStatement얻기&#13;
			pstmt = conn.prepareStatement(sql);&#13;
&#13;
            //3.PrepareStatement Parameter설정&#13;
            			&#13;
			//4.DB update&#13;
            res = pstmt.executeUpdate();&#13;
			&#13;
&#13;
		} catch (Exception e) {&#13;
			// TODO: handle exception&#13;
			e.printStackTrace();&#13;
		} finally {&#13;
&#13;
			try {&#13;
				if (pstmt != null)&#13;
					pstmt.close();&#13;
				if (conn != null)&#13;
					conn.close();&#13;
			} catch (SQLException e) {&#13;
				// TODO Auto-generated catch block&#13;
				e.printStackTrace();&#13;
			}&#13;
		}&#13;
&#13;
		return res;&#13;
	}</template></templates>